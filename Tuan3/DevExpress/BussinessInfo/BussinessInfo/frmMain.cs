using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.Skins;
using DevExpress.LookAndFeel;
using DevExpress.UserSkins;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraBars.Helpers;
using DevExpress.XtraScheduler;
using BussinessInfo.Dapper;
using BussinessInfo.Models;
using System.Threading;
using System.IO;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using System.Web;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Views.Grid;

namespace BussinessInfo
{
    public partial class frmMain : RibbonForm
    {
        DoanhNghiepRepos doanhNghiepRepos = new DoanhNghiepRepos();
        DMDiaBanRepos diaBanRespos = new DMDiaBanRepos();
        DMNganhNgheRepos nganhNgheRespos = new DMNganhNgheRepos();
        DMThuePhaiNopRepos thuePhaiNopRespos = new DMThuePhaiNopRepos();
        DMDoanhNghiepTrucThuocRepos dnTrucThuocRespos = new DMDoanhNghiepTrucThuocRepos();
        TTDNPage ttdnPage = new TTDNPage();

        List<DoanhNghiep> DataDoanhNghiep = new List<DoanhNghiep>();
        List<DMDiaBan> DataDiaBan = new List<DMDiaBan>();
        List<DMNganhNghe> DataNganhNghe = new List<DMNganhNghe>();
        List<DMThuePhaiNop> DataThue = new List<DMThuePhaiNop>();


        DataContext dataContext = new DataContext();
        public bool isTinhThangLast = false;
        public int indexGet = 0;
        public int indexUpdate = 0;
        public int totalDN = 0;

        string maSTErrorDoanhNghiep = string.Empty;
        string maSTErrorDNTT = string.Empty;
        string maSTErrorThue = string.Empty;
        string maSTErrorNN = string.Empty;
        string maSTErrorNH = string.Empty;
        string maSTErrorTag = string.Empty;

        private string pageUrl = string.Empty;
        private string urlDSCongTy = "https://thongtindoanhnghiep.co/api/company";// danh sách công ty lấy theo tham số i="ngành nghề" r="số lượng trên 1 trang max 100" p="số trang"
        public frmMain()
        {
            InitializeComponent();
            InitSkinGallery();

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Fill();
        }
        void InitSkinGallery()
        {
            SkinHelper.InitSkinGallery(rgbiSkins, true);
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            gridControlTinhThanh.MainView = gridTinhThanh;

            DataDoanhNghiep = doanhNghiepRepos.GetAll(new List<string>() { "Id", "MaSoThue", "Title" });
            gridControlData.DataSource = DataDoanhNghiep;

            DataDiaBan = diaBanRespos.GetAll();
            List<string> lstTinhThanh = DataDiaBan.Where(x => x.Type == 1).Select(d => d.Title).ToList();
            (fillterTinhThanh.Edit as RepositoryItemComboBox).Items.AddRange(lstTinhThanh);

            (dongBoTinh.Edit as RepositoryItemComboBox).Items.AddRange(lstTinhThanh);

            DataNganhNghe = nganhNgheRespos.GetAll();
            List<string> lstNN = DataNganhNghe.Select(x => x.Title).ToList();
            (fillterNganhNghe.Edit as RepositoryItemComboBox).Items.AddRange(lstNN);

            DataThue = thuePhaiNopRespos.GetAll();
            List<string> lstThue = DataThue.Select(x => x.Ten).ToList();
            (fillterThuePhaiNop.Edit as RepositoryItemComboBox).Items.AddRange(lstThue);

            if (!File.Exists("idDN.txt"))
                File.Create("idDN.txt");
            if (!File.Exists("idDNTT.txt"))
                File.Create("idDNTT.txt");
            if (!File.Exists("idThue.txt"))
                File.Create("idThue.txt");
            if (!File.Exists("idNN.txt"))
                File.Create("idNN.txt");
            if (!File.Exists("idNH.txt"))
                File.Create("idNH.txt");
        }

        private void FrmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            LuuLog();
        }

        private void barKiemTra_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        private void TasksItem_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            demo dm = new demo();
            dm.ShowDialog();
        }

        private void BarDongBo_ItemClick(object sender, ItemClickEventArgs e)
        {
            //check đang chọn trang nào để xử lý
            //navBarControl.ActiveGroup

            //txt = cbxPage.EditValue.ToString();
            //if (string.IsNullOrEmpty(pageUrl))
            //{
            //    MessageBox.Show("Chưa chọn trang!");
            //}
            //else
            //{
            //if (pageUrl.Contains("thongtindoanhnghiep"))
            //{
            int countTT = gridTinhThanh.SelectedRowsCount;
            if (countTT == 0)
            {
                MessageBox.Show("Chưa chọn tỉnh thành!");
            }
            else
            {
                BatDauChayDongBo();
            }
            //}
            //}
        }
        private void BatDauChayDongBo()
        {
            //Reset trạng thái
            indexGet = 0;
            indexUpdate = 0;
            totalDN = 0;
            TurnOffControl();
            Thread newThread = new Thread(DongBo);
            newThread.Start();
        }
        private void DongBo()
        {
            List<DoanhNghiep> lstDoanhNghiep = new List<DoanhNghiep>();

            //Lấy ra các tỉnh thành
            int[] arrTinhThanh = gridTinhThanh.GetSelectedRows();
            int countTinh = arrTinhThanh.Count();
            int index = 0;
            for (int i = 0, n = arrTinhThanh.Length; i < n; i++)
            {
                Thread t1 = new Thread(ImportDoanhNghiep);
                if (i == n - 1)
                    isTinhThangLast = true;
                this.Invoke(new Action(() =>
                {
                    string tenTinhThanh = gridTinhThanh.GetRowCellDisplayText(arrTinhThanh[i], "Title");
                    txtStatus1.Caption = "Số tỉnh: " + (i + 1) + "/" + countTinh + " (" + tenTinhThanh + ")";
                }));
                int idTT = Convert.ToInt32(gridTinhThanh.GetRowCellDisplayText(arrTinhThanh[i], "ID"));
                totalDN += Convert.ToInt32(gridTinhThanh.GetRowCellDisplayText(arrTinhThanh[i], "TotalDoanhNghiep"));

                //get XaPhuong
                List<DMDiaBan> dmDiaBans = diaBanRespos.FindXaPhuongFromTinhThanh(idTT, 3);
                foreach (DMDiaBan diaBan in dmDiaBans)
                {
                    index++;
                    string url = diaBan.SolrID;
                    var regex = new Regex(Regex.Escape("/"));
                    url = regex.Replace(url, "?l=", 1);
                    url = url + "&r=100";

                    int page = 1, rowTotal = 99;
                    string urlPage = string.Empty;
                    while (page <= rowTotal / 100 + 1)
                    {
                        urlPage = urlDSCongTy + url + "&p=" + page;
                        string jsonPage = BaseAPI.GetReleases(urlPage);
                        if (page == 1)
                            rowTotal = doanhNghiepRepos.GetTotalRow(jsonPage);
                        ObjFromJson obj = JsonConvert.DeserializeObject<ObjFromJson>(jsonPage);
                        lstDoanhNghiep = obj.LtsItems;
                        if (lstDoanhNghiep != null && lstDoanhNghiep.Count > 0)
                        {
                            t1 = new Thread(ImportDoanhNghiep);
                            t1.Start(lstDoanhNghiep);
                        }
                        page++;
                    }
                }
                //Lưu file
                LuuLog();
            }
        }

        void LuuLog()
        {
            BaseAPI.WriteLog(maSTErrorDoanhNghiep, "idDN.txt");
            BaseAPI.WriteLog(maSTErrorDNTT, "idDNTT.txt");
            BaseAPI.WriteLog(maSTErrorThue, "idThue.txt");
            BaseAPI.WriteLog(maSTErrorNN, "idNN.txt");
            BaseAPI.WriteLog(maSTErrorNH, "idNH.txt");
            BaseAPI.WriteLog(maSTErrorTag, "idTag.txt");
        }
        void ImportDoanhNghiep(object _lstDoanhNghiep)
        {
            List<DoanhNghiep> lstDoanhNghiep = (List<DoanhNghiep>)_lstDoanhNghiep;
            List<string> lstMaSoThue = lstDoanhNghiep.Where(x => !string.IsNullOrEmpty(x.MaSoThue)).Select(x => x.MaSoThue).ToList();
            lstDoanhNghiep = ttdnPage.GetListDoanhNghiepFormMaSoThue(lstMaSoThue, this);
            CapNhatDoanhNghiepFormListDoanhNghiep(lstDoanhNghiep, totalDN);
        }
        private void CapNhatDoanhNghiepFormListDoanhNghiep(List<DoanhNghiep> lstDoanhNghiep, int sum)
        {
            if (lstDoanhNghiep != null && lstDoanhNghiep.Count() > 0)
            {
                foreach (DoanhNghiep item in lstDoanhNghiep)
                {
                    DoanhNghiep dn = doanhNghiepRepos.Find(item.MaSoThue, DataDoanhNghiep);
                    try
                    {
                        if (dn == null)
                        {
                            dn = doanhNghiepRepos.Add(item);
                            DataDoanhNghiep.Add(dn);
                        }
                        else
                        {
                            //item.Id = dn.Id;
                            dn = doanhNghiepRepos.Update(item);
                        }
                    }
                    catch { maSTErrorDoanhNghiep += "#" + item.MaSoThue; }
                    if (dn != null)
                    {
                        int idDN = dn.Id;
                        //get doanh nghiệp trực thuộc
                        foreach (LtsDoanhNghiepTrucThuoc dnTrucThuoc in item.LtsDoanhNghiepTrucThuoc)
                        {
                            try
                            {
                                DMDoanhNghiepTrucThuoc dntt = dnTrucThuocRespos.Find(dnTrucThuoc.Title);
                                if (dntt == null)
                                {
                                    dntt = dnTrucThuocRespos.Add(new DMDoanhNghiepTrucThuoc()
                                    {
                                        MaSoThue = dnTrucThuoc.MaSoThue,
                                        Title = dnTrucThuoc.Title,
                                        DiaChi = dnTrucThuoc.DiaChi,
                                        DoanhNghiepID = dnTrucThuoc.DoanhNghiepID,
                                        DoanhNghiepMaSoThue = dnTrucThuoc.DoanhNghiepMaSoThue,
                                        DoanhNghiepTitle = dnTrucThuoc.DoanhNghiepTitle,
                                        DoanhNghiepTitleAscii = dnTrucThuoc.DoanhNghiepTitleAscii,
                                        QuanHe = dnTrucThuoc.QuanHe,
                                        SolrID = dnTrucThuoc.SolrID,
                                        Type = dnTrucThuoc.Type
                                    });
                                }
                                int idtt = dntt.Id;
                                DoanhNghiepRepos.DN_UpDNDoanhNghiepTrucThuoc(idDN, idtt, dnTrucThuoc.QuanHe + "");
                            }
                            catch (Exception ex)
                            { maSTErrorDNTT += item.MaSoThue + ": " + ex.ToString() + "\n"; }
                        }
                        //Get thuế phải nộp
                        foreach (string thuePhaiNop in item.DSThuePhaiNop)
                        {
                            try
                            {
                                DMThuePhaiNop dmThue = new DMThuePhaiNop();
                                string[] thues = thuePhaiNop.Split(new string[] { "|" }, StringSplitOptions.None);
                                string thuePN = thues[thues.Length - 1].Trim();
                                if (!string.IsNullOrEmpty(thuePN))
                                    dmThue = thuePhaiNopRespos.Find(thuePN);
                                if (dmThue == null)
                                {
                                    dmThue = thuePhaiNopRespos.Add(new DMThuePhaiNop() { Ten = thuePN });
                                }
                                if (dmThue != null)
                                    DoanhNghiepRepos.DN_GetDNThuePhaiNop(idDN, dmThue.Id);
                            }
                            catch (Exception ex)
                            { maSTErrorThue += item.MaSoThue + ": " + ex.ToString() + "\n"; }
                        }
                        //Get ngành nghề
                        foreach (int idnn in item.DSNganhNgheKinhDoanhID)
                        {
                            try
                            {
                                DoanhNghiepRepos.DN_SetNNDoanhNghiep(idDN, idnn, "");
                            }
                            catch (Exception ex)
                            { maSTErrorNN += item.MaSoThue + ": " + ex.ToString() + "\n"; }
                        }
                        //Get Ngân hàng
                        foreach (string nh in item.DSNganHang)
                        {
                            try
                            {
                                string[] nhs = nh.Split(new string[] { "|" }, StringSplitOptions.None);
                                string nganhang = nhs[nhs.Length - 1].Trim();
                                //nganhang = HttpUtility.UrlEncode(nganhang);
                                DoanhNghiepRepos.DN_SetNganHang(idDN, nganhang);
                            }
                            catch (Exception ex)
                            { maSTErrorNH += item.MaSoThue + ": " + ex.ToString() + "\n"; }
                        }
                        //Get Tag
                        foreach (string tag in item.DSTags)
                        {
                            try
                            {
                                string tagEncode = tag;
                                DoanhNghiepRepos.DN_SetTag(idDN, tagEncode);
                            }
                            catch (Exception ex)
                            { maSTErrorTag += item.MaSoThue + ": " + ex.ToString() + "\n"; }
                        }

                        //catch (Exception ex)
                        //{
                        //    maSTError += "#" + item.MaSoThue;
                        //}
                        indexUpdate++;
                        this.Invoke(new Action(() =>
                        {
                            txtStatus3.Caption = "Đang đồng bộ: " + indexUpdate + "/" + sum;
                        }));
                    }
                }
            }
        }

        private void barXuatExcel_ItemClick(object sender, ItemClickEventArgs e)
        {
            saveFileDialog1.InitialDirectory = @"C:\";
            saveFileDialog1.Title = "Lưu danh sách doanh nghiệp";
            saveFileDialog1.CheckPathExists = true;
            saveFileDialog1.DefaultExt = "xlsx";
            saveFileDialog1.Filter = "Excel file (*.xlsx)|*.xlsx";
            saveFileDialog1.FilterIndex = 1;
            saveFileDialog1.RestoreDirectory = true;
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                gridControlData.ExportToXlsx(saveFileDialog1.FileName);
            }
        }
        private void Timer1_Tick(object sender, EventArgs e)
        {
            txtStatus2.Caption = "Đang lấy dữ liệu: " + indexGet + "/" + totalDN;
            if (isTinhThangLast && indexUpdate >= totalDN)
            {
                TurnOnControl();
            }
        }

        private void ChangeItem(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            pageUrl = e.Link.Item.Hint;
        }

        private void BtnDongBoNgoaiLe_ItemClick(object sender, ItemClickEventArgs e)
        {
            TurnOffControl();
            isTinhThangLast = true;
            Thread newThread = new Thread(DongBoNgoaiLe);
            newThread.Start();
        }
        private void DongBoNgoaiLe()
        {
            string maSoThue = txtMaSoThue.EditValue + "";
            if (string.IsNullOrEmpty(maSoThue))
            {
                MessageBox.Show("Chưa điền mã số thuế!");
                return;
            }
            indexGet = 0;
            indexUpdate = 0;
            totalDN = 0;
            string[] arrMST = maSoThue.Split(new string[] { "#" }, StringSplitOptions.None);
            List<string> lstMaSoThue = new List<string>();
            lstMaSoThue = arrMST.Where(x => !string.IsNullOrEmpty(x)).ToList();
            totalDN = lstMaSoThue.Count;
            List<DoanhNghiep> lstDoanhNghiep = ttdnPage.GetListDoanhNghiepFormMaSoThue(lstMaSoThue, this);
            CapNhatDoanhNghiepFormListDoanhNghiep(lstDoanhNghiep, totalDN);
            //Lưu file
            LuuLog();
        }
        private void TurnOffControl()
        {
            barKiemTra.Enabled = false;
            barDongBo.Enabled = false;
            btnDongBoNgoaiLe.Enabled = false;
            txtStatus4.Caption = "";
            timer1.Start();
        }
        private void TurnOnControl()
        {
            barKiemTra.Enabled = true;
            barDongBo.Enabled = true;
            btnDongBoNgoaiLe.Enabled = true;
            txtStatus4.Caption = "Đã đồng bộ xong!";
            timer1.Stop();
        }

        private void BtnFind_ItemClick(object sender, ItemClickEventArgs e)
        {
            string mst = fillterMST.EditValue + "";
            string tag = fillterTag.EditValue + "";
            string tinhthanh = fillterTinhThanh.EditValue + "";
            string quanhuyen = fillterQuanHuyen.EditValue + "";
            string nganhnghe = fillterNganhNghe.EditValue + "";
            string thue = fillterThuePhaiNop.EditValue + "";
        }

        private void FillterTinhThanh_EditValueChanged(object sender, EventArgs e)
        {
            string tt = fillterTinhThanh.EditValue + "";
            List<string> lstQuanHuyen = DataDiaBan.Where(x => x.TinhThanhTitle == tt && x.Type == 2).Select(x => x.Title).ToList();

            (fillterQuanHuyen.Edit as RepositoryItemComboBox).Items.AddRange(lstQuanHuyen);
        }

        private void dongBoBtn_ItemClick(object sender, ItemClickEventArgs e)
        {
            gridControlTinhThanh.MainView = gridDanhSach;
            TurnOffControl();
            isTinhThangLast = true;
            Thread newThread = new Thread(DongBoQuanHuyen);
            newThread.Start();
        }

        private void DongBoTinh_EditValueChanged(object sender, EventArgs e)
        {
            string tt = dongBoTinh.EditValue + "";
            List<string> lstQuanHuyen = DataDiaBan.Where(x => x.TinhThanhTitle == tt && x.Type == 2).Select(x => x.Title).ToList();

            (dongBoQuan.Edit as RepositoryItemComboBox).Items.AddRange(lstQuanHuyen);
        }
        private void DongBoQuanHuyen()
        {
            string tinhthanh = dongBoTinh.EditValue + "";
            string quanhuyen = dongBoQuan.EditValue + "";
            if (string.IsNullOrEmpty(tinhthanh))
            {
                MessageBox.Show("Chưa chọn tỉnh thành!");
                return;
            }
            if (string.IsNullOrEmpty(quanhuyen))
            {
                MessageBox.Show("Chưa chọn quận huyện!");
                return;
            }
            List<DoanhNghiep> lstDoanhNghiep = new List<DoanhNghiep>();


            //get XaPhuong
            List<DMDiaBan> dmDiaBans = diaBanRespos.FindXaPhuongFromTinhQuan(tinhthanh, quanhuyen, 3);
            int index = 0;
            Thread t1;
            foreach (DMDiaBan diaBan in dmDiaBans)
            {
                index++;
                string url = diaBan.SolrID;
                var regex = new Regex(Regex.Escape("/"));
                url = regex.Replace(url, "?l=", 1);
                url = url + "&r=100";
                totalDN = 99;
                int page = 1;
                string urlPage = string.Empty;
                while (page <= totalDN / 100 + 1)
                {
                    urlPage = urlDSCongTy + url + "&p=" + page;
                    string jsonPage = BaseAPI.GetReleases(urlPage);
                    if (page == 1)
                        totalDN = doanhNghiepRepos.GetTotalRow(jsonPage);
                    ObjFromJson obj = JsonConvert.DeserializeObject<ObjFromJson>(jsonPage);
                    lstDoanhNghiep.AddRange(obj.LtsItems);
                    if (lstDoanhNghiep != null && lstDoanhNghiep.Count > 0)
                    {
                        t1 = new Thread(GetDoanhNghiep);
                        t1.Start(lstDoanhNghiep);
                    }
                    page++;
                }
            }

            //Lưu file
            LuuLog();
        }

        void GetDoanhNghiep(object _lstDoanhNghiep)
        {
            List<DoanhNghiep> lstDoanhNghiep = (List<DoanhNghiep>)_lstDoanhNghiep;
            this.Invoke(new Action(() =>
            {
                gridControlTinhThanh.DataSource = lstDoanhNghiep;
                txtStatus3.Caption = "Đang lấy: " + lstDoanhNghiep.Count + "/" + totalDN;
            }));
        }

        private void DongBoXuatExcelBtn_ItemClick(object sender, ItemClickEventArgs e)
        {
            saveFileDialog1.InitialDirectory = @"C:\";
            saveFileDialog1.Title = "Lưu danh sách doanh nghiệp";
            saveFileDialog1.CheckPathExists = true;
            saveFileDialog1.DefaultExt = "xlsx";
            saveFileDialog1.Filter = "Excel file (*.xlsx)|*.xlsx";
            saveFileDialog1.FilterIndex = 1;
            saveFileDialog1.RestoreDirectory = true;
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                gridControlTinhThanh.ExportToXlsx(saveFileDialog1.FileName);
            }
        }
        bool indicatorIcon = true;
        private void GridDanhSach_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            GridView view = (GridView)sender;
            if (e.Info.IsRowIndicator && e.RowHandle >0)
            {
                e.Info.DisplayText = e.RowHandle + "";
                if (!indicatorIcon)
                {
                    e.Info.ImageIndex = -1;
                }
            }
        }
    }
    
}